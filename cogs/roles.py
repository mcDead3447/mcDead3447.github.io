import discord
from discord.ext import commands
from discord.ui import View

class ServerRolesChoose(View):
    @discord.ui.select(
        min_values=1,
        max_values=3,
        placeholder='–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å',
        options=[
            discord.SelectOption(label='–ö—Ä–∞—Å–Ω–∞—è —Ä–æ–ª—å', emoji="üî¥", value='0', description='–¢–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å'),
            discord.SelectOption(label='–§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–æ–ª—å', emoji="üü£", value='1', description='–¢–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å'),
            discord.SelectOption(label='–ó–µ–ª—ë–Ω–∞—è —Ä–æ–ª—å', emoji="üü¢", value='2', description='–¢–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å')
        ])
    async def select_callback(self, interaction, select):
        server = interaction.guild
        Role_one = discord.utils.get(server.roles, name='–ö—Ä–∞—Å–Ω–∞—è —Ä–æ–ª—å')
        Role_two = discord.utils.get(server.roles, name='–§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–æ–ª—å')
        Role_three = discord.utils.get(server.roles, name='–ó–µ–ª—ë–Ω–∞—è —Ä–æ–ª—å')
        role = None
        if Role_one in interaction.user.roles:
            await interaction.user.remove_roles(Role_one)
        if Role_two in interaction.user.roles:
            await interaction.user.remove_roles(Role_two)
        if '0' in select.values:
            await interaction.user.add_roles(Role_one)
            role = f'{Role_one.mention}'
        if '1' in select.values:
            await interaction.user.add_roles(Role_two)
            if Role_one and Role_two in interaction.user.roles:
                role = f'{Role_one.mention}, {Role_two.mention}'
            else:
                role = f'{Role_two.mention}'
        if '2' in select.values:
            await interaction.user.add_roles(Role_three)
            if Role_one and Role_two and Role_three in interaction.user.roles:
                role = f'{Role_one.mention}, {Role_two.mention}, {Role_three.mention}'
            elif Role_one and Role_three in interaction.user.roles:
                role = f'{Role_one.mention}, {Role_three.mention}'
            elif Role_two and Role_three in interaction.user.roles:
                role = f'{Role_two.mention}, {Role_three.mention}'
            else:
                role = f'{Role_three.mention}'
        if role is None:
            await interaction.response.send_message(f'–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏, –µ—Å–ª–∏ —É –í–∞—Å –¥–æ —ç—Ç–æ–≥–æ —Å—Ç–æ—è–ª–∏ '
                                                    f'–∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ä–æ–ª–∏, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã', ephemeral=True)
        else:
            await interaction.response.send_message(f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ä–æ–ª–∏: {role}',
                                                    ephemeral=True)

class Roles(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("Cog [roles] loaded.")

    @commands.command()
    async def roles(self, ctx):
        view = ServerRolesChoose()
        await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Ä–æ–ª—å.", view=view)

    @commands.command()
    async def –ø–æ–Ω(self, ctx):
        await ctx.send("–ø–æ–Ω")

async def setup(bot):
    await bot.add_cog(Roles(bot))